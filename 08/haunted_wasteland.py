"""
--- Day 8: Haunted Wasteland ---
https://adventofcode.com/2023/day/8
"""

test_input1 = """RL

AAA = (BBB, CCC)
BBB = (DDD, EEE)
CCC = (ZZZ, GGG)
DDD = (DDD, DDD)
EEE = (EEE, EEE)
GGG = (GGG, GGG)
ZZZ = (ZZZ, ZZZ)
"""


def prepare_data(input):
    data = {}
    for row, line in enumerate(input.splitlines()):
        # print(row, line)
        if row == 0:
            instructions = line
        elif row == 1:
            continue
        else:
            data[line[0:3]] = (line[7:10], line[-4:-1])

    return instructions, data


# generated by ai :-)
def repeating_string_generator(input_string):
    while True:
        for char in input_string:
            yield char


def part1(instructions, data):
    steps = 0
    position = "AAA"

    instructions_generator = repeating_string_generator(instructions)

    for direction in instructions_generator:
        print(steps, position)

        if direction == "L":
            position = data[position][0]
        elif direction == "R":
            position = data[position][1]
        else:
            print("waddup?!")
            raise SystemExit

        steps += 1

        if position == "ZZZ":
            return steps

    return


with open("08/input.txt") as f:
    input = f.read()

test_instructions1, test_data1 = prepare_data(test_input1)
test_result1 = part1(test_instructions1, test_data1)
assert test_result1 == 2, f"Test result in part 1 should be 2, not {test_result1}"

instructions1, data1 = prepare_data(input)
result1 = part1(instructions1, data1)
print(result1)  # 18023
